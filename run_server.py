import asyncio
import logging
from fastapi import FastAPI, Request
from contextlib import asynccontextmanager
import uvicorn
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7511712960:AAFJ_-2yoeCuHJqwya-MMWu_7-3HNZNePWI"
ADMIN_CHAT_ID = 361833263
PORT = 8000

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
bot = None
dp = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    global bot, dp
    logger.info("üöÄ Starting HypeBot Server...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    @dp.message(Command("start"))
    async def start_command(message: Message):
        await message.answer(
            "üëü HypeBot Server —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        )
    
    @dp.message(Command("status"))
    async def status_command(message: Message):
        await message.answer(
            "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
            "‚úÖ –°–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            "‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω\n"
            "‚úÖ API: –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    
    @dp.message(Command("check"))
    async def check_command(message: Message):
        if message.from_user.id == ADMIN_CHAT_ID:
            await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await asyncio.sleep(2)
            await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–∞–π–¥–µ–Ω–æ 0 –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        else:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(dp.start_polling(bot))
    logger.info("‚úÖ Telegram bot started with polling")
    
    app.state.bot = bot
    app.state.dp = dp
    
    yield
    
    logger.info("üõë Shutting down...")
    await dp.stop_polling()
    await bot.session.close()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="HypeBot Server",
    description="–°–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫",
    version="2.0.0",
    lifespan=lifespan
)

@app.get("/")
async def root():
    return {
        "status": "running",
        "service": "HypeBot Server",
        "version": "2.0.0",
        "endpoints": {
            "health": "/api/v1/health",
            "docs": "/docs",
            "webhook": "/api/v1/webhooks/telegram"
        }
    }

@app.get("/api/v1/health")
async def health():
    return {
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat(),
        "checks": {
            "server": True,
            "bot": bot is not None,
            "database": True,  # TODO: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            "redis": True      # TODO: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis
        }
    }

@app.post("/api/v1/webhooks/telegram")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"ok": False, "error": str(e)}

@app.get("/api/v1/posts")
async def get_posts():
    return {
        "posts": [],
        "total": 0,
        "message": "Posts API endpoint"
    }

@app.post("/api/v1/check-sources")
async def check_sources():
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    return {
        "status": "checking",
        "sources": ["SneakerNews", "Hypebeast", "Highsnobiety"]
    }

if __name__ == "__main__":
    print("=" * 50)
    print("üöÄ HypeBot Server v2.0")
    print("=" * 50)
    print(f"üìç Server: http://localhost:{PORT}")
    print(f"üìö API Docs: http://localhost:{PORT}/docs")
    print(f"ü§ñ Bot: @ChiPackPostBot")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=PORT, log_level="info")
